<!-- Copyright (c) 2017 Twitter, Inc. -->
<!-- Licensed under the Apache License, Version 2.0 (see LICENSE.md). -->
<!-- Autogenerated by $Generator from $Template. -->

# Performance

Our research goal is to achieve dramatic compilation speedups (5-10x)
for typical Scala codebases, and we are currently well on track to reaching
this goal.

## Hardware

All benchmarks run on a computer with
$Cpu (${PhysicalCores}x${L1dCache}+${L1iCache} L1 cache,
${PhysicalCores}x${L2Cache} L2 cache, ${L3Cache} L3 cache,
configured to run ${PhysicalCores} physical cores and
${LogicalCores} logical cores with $TurboBoost),
$Ram RAM and $DiskDrive disk drive.

## Software

In our benchmarks, we use $OperatingSystem and $Jre
to run the current version of Rsc, $Scalac211, $Scalac212 and $Javac.
To benchmark native applications, we use [our own microbenchmark harness]($CliBenchPath).
To benchmark JVM applications, we use $SbtJmh that runs in $Sbt.

Our benchmarks run different fragments of compilation pipelines of
different compilers on two comparable codebases:
  * [re2j]($Re2jPath), an implementation
    of linear time regular expression matching in Java ($Re2jLoc loc).
  * [re2s]($Re2sPath), a port of re2j
    to Scala [performed in Scala Native](https://github.com/scala-native/scala-native/pull/894).
    For Rsc, re2s is accompanied by [Stdlib.scala]($StdlibPath),
    a source file that declares stubs for referenced definitions from
    scala-library and the JDK ($Re2sScalacLoc loc + $StdlibLoc loc =
    $Re2sRscLoc loc).

Every benchmark runs in two different modes: cold (performance
of a single run without warm-up) and hot (performance of a steady state achieved
by doing a large number of runs).

## Disclaimer

At this point, Rsc only implements a subset of functionality provided by the
Scala compiler. This means that the benchmark results provided below must
be interpreted with utmost care. Concretely:
  * Performance numbers may significantly deteriorate as we will be
    implementing more and more functionality of the Scala compiler.
    For example, adding support for classpath loading or implicit search
    is very likely to slow down our compiler by a significant factor.
  * Direct comparisons of Rsc and Scalac performance numbers should take
    into account similarities and differences in provided functionality.
    Consult [the summary in the "Compiler" document](compiler.md#summary)
    for more information.

## Results

To reproduce, run `$BenchCommand` (this will take a while).

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$RscNativeSchedulePath">$RscNativeScheduleBench</a></td>
    <td width="208px">$ColdRscNativeScheduleResult</td>
    <td width="208px">$HotRscNativeScheduleResult</td>
  </tr>
  <tr>
    <td><a href="$RscSchedulePath">$RscScheduleBench</a></td>
    <td>$ColdRscScheduleResult</td>
    <td>$HotRscScheduleResult</td>
  </tr>
  <tr>
    <td><a href="$ScalacNamer211Path">$ScalacNamer211Bench</a></td>
    <td>$ColdScalacNamer211Result</td>
    <td>$HotScalacNamer211Result</td>
  </tr>
  <tr>
    <td><a href="$ScalacNamer212Path">$ScalacNamer212Bench</a></td>
    <td>$ColdScalacNamer212Result</td>
    <td>$HotScalacNamer212Result</td>
  </tr>
</table>

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$RscNativeTypecheckPath">$RscNativeTypecheckBench</a></td>
    <td width="208px">$ColdRscNativeTypecheckResult</td>
    <td width="208px">$HotRscNativeTypecheckResult</td>
  </tr>
  <tr>
    <td><a href="$RscTypecheckPath">$RscTypecheckBench</a></td>
    <td>$ColdRscTypecheckResult</td>
    <td>$HotRscTypecheckResult</td>
  </tr>
  <tr>
    <td><a href="$ScalacTyper211Path">$ScalacTyper211Bench</a></td>
    <td>$ColdScalacTyper211Result</td>
    <td>$HotScalacTyper211Result</td>
  </tr>
  <tr>
    <td><a href="$ScalacTyper212Path">$ScalacTyper212Bench</a></td>
    <td>$ColdScalacTyper212Result</td>
    <td>$HotScalacTyper212Result</td>
  </tr>
</table>

<table>
  <th>
    <td>Cold</td>
    <td>Hot</td>
  </th>
  <tr>
    <td width="208px"><a href="$ScalacCompile211Path">$ScalacCompile211Bench</a></td>
    <td width="208px">$ColdScalacCompile211Result</td>
    <td width="208px">$HotScalacCompile211Result</td>
  </tr>
  <tr>
    <td><a href="$ScalacCompile212Path">$ScalacCompile212Bench</a></td>
    <td>$ColdScalacCompile212Result</td>
    <td>$HotScalacCompile212Result</td>
  </tr>
  <tr>
    <td><a href="$JavacCompilePath">$JavacCompileBench</a></td>
    <td>$ColdJavacCompileResult</td>
    <td>$HotJavacCompileResult</td>
  </tr>
</table>

## Summary

  * First and foremost, the current prototype of Rsc is significantly faster
    than full Scalac in both cold and hot benchmarks. Most impressively,
    hot typechecking is ~${SpeedupOverScalacTyper}x faster
    [with the disclaimer provided above](performance.md#disclaimer).
  * Scala Native has clearly succeeded in its goal of speeding
    up startup time of Scala applications. In cold benchmarks that are
    representative of running programs from command line, Rsc Native has
    a ~${SpeedupOverRscJVM}x edge over vanilla Rsc.
  * Finally, it was interesting to see that the current prototype of Rsc
    typechecks re2s ~${SpeedupOverJavacCompile}x faster than Javac compiles re2j,
    [given the disclaimer provided above](performance.md#disclaimer).
    As we will be adding more features to Rsc, we will be keeping an eye on how
    this will affect compilation performance relative to Javac.
  * In the benchmarks above, all compilers are run in single-threaded mode.
    However, unlike Scalac and Javac that are inherently single-threaded,
    [Rsc was designed to enable massive parallelism](compiler.md). In the near
    future, we plan to leverage this unique feature of Rsc and parallelize
    its pipeline.
